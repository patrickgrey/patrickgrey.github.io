<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: web-apps | ]]></title>
  <link href="/blog/categories/web-apps/atom.xml" rel="self"/>
  <link href="/"/>
  <updated>2014-09-01T21:10:46+01:00</updated>
  <id>/</id>
  <author>
    <name><![CDATA[{"name"=>"Patrick Grey", "email"=>"websemantic@yahoo.co.uk"}]]></name>
    
  </author>
  <generator uri="https://github.com/recurser/jekyll-plugins">Recurser</generator>

  
  <entry>
    <title type="html"><![CDATA[Case Study: Say Again?]]></title>
    <link href="/blog/case-study/web-apps/2014/01/11/case-phr.html"/>
    <updated>2014-01-11T00:00:00+00:00</updated>
    <id>/blog/case-study/web-apps/2014/01/11/case-phr</id>
    <content type="html"><![CDATA[<p>Air Traffic Control and Pilots use pre-defined phrases when communicating to ensure clarity. Eurocontrol had a database application that could act as a reference for these phrases but they wanted to modernise the technologies used and improve the administration process.</p>

<figure>
  <img src="/blog/img/2014/jan/2014-01-11-case-phr.jpg" alt="Screenshot of the Flight Plan Guide Database Application v2.0." style="max-width:653px;">
  <figcaption>Screenshot of the Say Again? Database Application v2.0.</figcaption>
</figure>

<p>You can view the current version at: <a href="http://contentzone.eurocontrol.int/Phraseology/" title="Open the Say Again? application in a new Window." target="_blank">http://contentzone.eurocontrol.int/Phraseology/</a></p>

<figure>
  <img src="/blog/img/2014/jan/2014-01-11-case-phrm.jpg" alt="Screenshot of the Flight Plan Guide Database Application v2.0 at a small screen resolution." style="max-width:436px;">
  <figcaption>Screenshot of the same Application on a small screen.</figcaption>
</figure>

<h3>Spec</h3>

<p>Eurocontrol asked me to redesign the application to improve the User Experience and administrative process.</p>

<p>Making updates to the database involved the Subject Matter Expert (SME) making changes to an Excel spreadsheet and uploading it via a web page. The database was then destroyed and rebuilt using that data. As well as being a clumsy interface to use, it left user input unchecked and prone to errors.</p>

<p>I was asked to create the technical spec for review but the final product should work in IE8 on XP as a minimum.</p>

<h3>Solution</h3>

<p>Each Phrase could belong to two groupings called &quot;Categories&quot; and &quot;Contexts&quot;. There are fairly complicated relationships between the groups and Phrases. The existing application did these calculations on the server side by querying the database. This was logical as the relationships are already established there.</p>

<p>However, this resulted in a round trip to the server each time a user wanted to refine a grouping filter. Users would typically make several selections and the trips to the server could really slow things down.</p>

<p>I decided to move the filtering calculation to the client-side, using custom JavaScript and JSON models to recreate the relationships. This meant that filtering would occur instantly so that users could quickly find the Phrase(s) they would looking for.</p>

<p>The application was built using a responsive approach (meaning it will work as well on mobile devices as desktop computers) so that there would be only one code base to maintain.</p>

<p>I created a custom web interface for the SME to add, edit and delete phrases.</p>

<p>Finally, I ensured that the application could be used off-line so that those without Internet access, such as pilots in the cockpit, could refer to it.</p>

<h3>Technical</h3>

<p>This really was a learning project for me and I have to admit I made several mistakes. I knew <em>how</em> to do what I wanted but, when I started testing the application, I realised I didn&#39;t know how to do it <strong>well</strong>.</p>

<p>I used MS SQL Server and ASP.NET for the server side. In the front end I used jQuery Mobile as the interface should be touch-friendly in a responsive design.</p>

<ul>
<li>Mistake 1: using JavaScript to make a responsive design work.

<ul>
<li>Due to a lack of CSS knowledge at the time, I couldn&#39;t get jQuery Mobile to do what I wanted with CSS in the navigation and instead overrode it with JavaScript. This quickly got messy and hard to maintain.</li>
<li>If there is a next version, it will use only CSS.</li>
</ul></li>
<li>Mistake 2: Overestimating the JavaScript engine in IE8.

<ul>
<li>I initially used a JavaScript library called <a href="http://www.taffydb.com/" title="An open source JavaScript Database library.">TaffyDB</a> and jQuery for any looping though items.</li>
<li>IE8 continually hung and showed &#39;script running too slow&#39; warnings. It was basically exceeding the maximum number of calculations allowed.</li>
<li>Besides having a great name, TaffyDB is a great tool but I&#39;m not sure I was getting the most out of it. Also, I soon discovered the impact of being lazy and relying on jQuery too much. I was making calls to elements that was creating loops within loops (possibly within loops!!).</li>
<li>Eventually I gave up trying to optimise my approach and completely rewrote the code using dictionaries so I could drop TaffyDB and vanilla JavaScript instead of jQuery wherever possible.</li>
<li>You can still hear IE8 creaking but it works :-)</li>
</ul></li>
<li>Mistake 3: I didn&#39;t take into account the impact of design in a page with a lot of content (long lists).

<ul>
<li>Older browsers and mobile devices would really struggle if any scrolling was involved.</li>
<li>After researching the issue I understood better the impact page repaints can have on browser performance.</li>
<li>I removed all the jQuery mobile drop shadows from each button in the huge lists and the problems were almost instantly fixed!</li>
</ul></li>
</ul>

<p>I found the problem of creating an offline application very interesting.</p>

<p>All content needs to be saved onto the client side. This means that it is not a practical approach for anything with a large amount of data. I would say that this application is probably on the limit.</p>

<p>You need an inter-page communication strategy. I initially considered using URL query strings but I could quickly exceed the maximum length limit with many selected options. Also, returning to the previous page could lose the selection made by the user, forcing them to re-enter quite complicated filtering.</p>

<p>In the end, I recorded selections to Local Storage on the browser and ran a check on that each time the page loaded. This works well.</p>

<p>I used the HTML5 AppCache feature to save assets offline but I needed a way to trigger updates on the client side to update the content when the database was updated.</p>

<p>The solution (scraped from various sources but, I&#39;m afraid, I can&#39;t find where just now) was to create a dynamic ASP.NET manifest. When the page loaded in the browser, some JavaScript would check for a new version of the manifest <a href="http://www.html5rocks.com/en/tutorials/appcache/beginner/#toc-updating-cache">http://www.html5rocks.com/en/tutorials/appcache/beginner/#toc-updating-cache</a>. The dynamic page (&quot;Manifest.aspx&quot;) would check for the last update to the database using the following SQL:</p>

<p><code>&quot;SELECT TOP 1 Stats.last_user_update As lastUpdate FROM sys.dm_db_index_usage_stats Stats, sys.tables Tables WHERE Stats.database_id = DB_ID( &#39;&quot;+connection.Database.ToString() +&quot;&#39;) ORDER BY Stats.last_user_update DESC&quot;</code></p>

<p>This would write a date into a comment in the manifest. If the date was different from the last time the browser checked, the new pages (with the new JSON data models) would be downloaded to the browser.</p>

<h3>Outcome</h3>

<p>After a longer than normal testing period the application was released. Feedback has been positive and the client is very happy with it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Case Study: Flight Plan Guide + Errors]]></title>
    <link href="/blog/case-study/web-apps/2014/01/11/case-fple.html"/>
    <updated>2014-01-11T00:00:00+00:00</updated>
    <id>/blog/case-study/web-apps/2014/01/11/case-fple</id>
    <content type="html"><![CDATA[<p><a href="/blog/case-study/web-apps/2014/01/10/case-fpl.html" title="Select to read a short case study of the Flight Plan Guide V1.0 web application.">Version 1.0</a> of the tool was so popular Eurocontrol decided to expand the app&#39;s remit. They wanted to add a section allowing users to explore errors they could expect to receive if the Flight Plan had been incorrectly filed.</p>

<figure>
  <img src="/blog/img/2014/jan/2014-01-11-case-fple.jpg" alt="Screenshot of the Flight Plan Guide Database Application v2.0." style="max-width:550px;">
  <figcaption>Screenshot of the Flight Plan Guide Database Application v2.0.</figcaption>
</figure>

<p>You can view the current version at: <a href="http://contentzone.eurocontrol.int/fpl/" title="Open the Flight Plan Guide application in a new Window." target="_blank">http://contentzone.eurocontrol.int/fpl/</a></p>

<figure>
  <img src="/blog/img/2014/jan/2014-01-11-case-fpleSmall.jpg" alt="Screenshot of the Flight Plan Guide Database Application v2.0 at a small screen resolution." style="max-width:395px;">
  <figcaption>Screenshot of the same Application on a small screen.</figcaption>
</figure>

<h3>Spec</h3>

<p>Eurocontrol came to me with a general requirement to add an Errors section while retaining the version 1.0 features. I was asked to write the spec. I presented them with 2 detailed options, outlining the costs and benefits of each.</p>

<ol>
<li>Adapt the current desktop and mobile applications to the new requirement.</li>
<li>Redsign from scratch, creating a responsive site and doing away with the need for dual applications - I had learned a wee bit more about responsive sites by now!</li>
</ol>

<p>All good websites should continue to evolve and my client, in their wisdom :-), chose to make the application responsive.</p>

<h3>Solution</h3>

<p>The new application is based on the &#39;Flat&#39; design concept. I like this because it improves performance in the browser and can make for a very clean interface as long as everything is given appropriate space and balance.</p>

<p>I created a responsive design that would work on phone screens as well as desktops.</p>

<p>I refactored the JavaScript to make it even more efficient and tried to use native JavaScript instead of jQuery wherever possible.</p>

<p>On the details page I also added a &#39;step through&#39; feature to allow users to step through the list of items they had filtered down to.</p>

<figure>
  <img src="/blog/img/2014/jan/2014-01-11-case-fpleSmall-detail.jpg" alt="Screenshot of the Flight Plan Item detail page at a small screen resolution." style="max-width:395px;">
  <figcaption>Screenshot of the Flight Plan Detail page with step through feature on a small screen.</figcaption>
</figure>

<h3>Technical</h3>

<p>I used jQuery Mobile for the interface as this is touch optimised and a better choice for a responsive design.</p>

<p>Offline is still achieved via HTML5 appcache: the manifest.appcache file is dynamic, written in ASP.NET. It queries the database for the last change time and date. This time and date is written into the appcache file as a comment. Therefore, if the appcache file changes in any way, this triggers a reload of the content to the local browser (using a JavaScript checking function in the browser).</p>

<p>This has the added benefit of improveing performance as new assets are only downloaded if there is a change on the server.</p>

<p>This approach can only be used for relatively small datasets as all the content has to be loaded onto the client side.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Case Study: Aircraft Performance v3.0]]></title>
    <link href="/blog/case-study/web-apps/2014/01/11/case-ap.html"/>
    <updated>2014-01-11T00:00:00+00:00</updated>
    <id>/blog/case-study/web-apps/2014/01/11/case-ap</id>
    <content type="html"><![CDATA[<p>This has proved to be one of the most popular applications created for Eurocontrol since I designed and built the first version in 2006.</p>

<p>It is important that Air Traffic Controllers understand the performance capabilities of aircraft they are monitoring. This application provides them with a reference tool to help them learn about those capabilities.</p>

<figure>
  <img src="/blog/img/2014/jan/2014-01-11-case-ap.jpg" alt="Screenshot of the Flight Plan Guide Database Application v3.0." style="max-width:700px;">
  <figcaption>Screenshot of the Say Again? Database Application v2.0. Note the personalised custom groups, advert and social media elements.</figcaption>
</figure>

<p>Version 1.0 provided search functions, detail displays, and an admin back-end. Version 2.0 was a rebuild replacing ASP with ASP.NET and MySQL with MS SQL.</p>

<p>Version 3.0 re-factored the application to make it tablet friendly (Flash graphs were replaced with images and an adaptive approach was adopted). Social sharing, course advertising and personalisation was also added (if the learner was logged on to the Learning Management System, they would be allowed to save custom lists of aircraft). Finally, a mobile version was also created.</p>

<figure>
  <img src="/blog/img/2014/jan/2014-01-11-case-ap-detail.jpg" alt="Screenshot of the Detail screen." style="max-width:500px;">
  <figcaption>Detail screen of the Application.</figcaption>
</figure>

<p>You can view the current version at: <a href="http://contentzone.eurocontrol.int/aircraftperformance/" title="Open the Aircraft Performance application in a new Window." target="_blank">http://contentzone.eurocontrol.int/aircraftperformance/</a></p>

<figure>
  <img src="/blog/img/2014/jan/2014-01-11-case-apm.jpg" alt="Screenshot of the Mobile Aircraft Performance Database v3.0." style="max-width:329px;">
  <figcaption>Screenshot of the mobile version of the Application.</figcaption>
</figure>

<p>You can view the current mobile version at: <a href="http://contentzone.eurocontrol.int/apm/" title="Open the Mobile Aircraft Performance application in a new Window." target="_blank">http://contentzone.eurocontrol.int/apm/</a></p>

<h3>Spec</h3>

<p>I was provided with a detailed, non-technical spec and asked to draw up the technical plans to work from.</p>

<p>It had to incorporate all the features mentioned above, be available to mobile devices and work in IE8 on XP as a minimum.</p>

<h3>Solution</h3>

<p>Some parts of the solution I am very happy with although now (some years after completion), I would possibly take a different approach.</p>

<p>The custom groups has proved popular and is an excellent way to encourage users to sign up for the Learning Management System (credit must go to the Project Manager for that idea!)</p>

<p>A wide range of devices have been tracked using the application but I would still prefer one code base for maintenance. Therefore, if I was awarded the work to create the next version, I would take a detailed look into whether a responsive approach would be feasible (sometime it just isn&#39;t!)</p>

<h3>Technical</h3>

<p>The desktop application was built using MS SQL and ASP.NET for the back end (and admin) with custom JavaScript and CSS, jQuery UI for the front end.</p>

<p>The mobile application used the same back end and an early version of jQuery Mobile for the front.</p>

<p>I built a small JavaScript library to communicate with the LMS API in order to log in.
LMS API and create a bridge for the Custom Groups feature.</p>

<p>I used AJAX calls to add, edit and delete custom data to the database. I built all this functionality using JavaScript.</p>

<h3>Outcome</h3>

<p>The Aircraft Performance Databases has consistently been one of the most visited applications at the Eurocontrol IANS training institute over the years, which I think shows its training value.</p>

<p>The project manager was so happy with the work, he has given me an open reference to use in all future tenders.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Case Study: Flight Plan Guide v1.0 + Mobile]]></title>
    <link href="/blog/case-study/web-apps/2014/01/10/case-fpl.html"/>
    <updated>2014-01-10T00:00:00+00:00</updated>
    <id>/blog/case-study/web-apps/2014/01/10/case-fpl</id>
    <content type="html"><![CDATA[<p><strong>Note: these applications have been superceeded by version 2.0. You can read about that <a href="/blog/case-study/web-apps/2014/01/11/case-fple.html" title="Select to read a short case study of the FPLE web application.">here</a>.</strong></p>

<p>In 2012 the format of Flight Plans was to be updated. To prepare Flight Plan users across Europe for the change in 2011, Eurocontrol commissioned me to create a database application to allow users to explore the changes.</p>

<h3>Spec</h3>

<p>Offline access was required as it would be used in-flight by pilots. There was also a need for an administration site to allow the Subject Matter Expert to create, edit and delete database content. Finally, the application had to work on a minimum browser of IE8 on XP. The rest was left up to me.</p>

<h3>Solution</h3>

<p>I designed and developer the MS SQL database, desktop and mobile applications and the admin back-end.</p>

<p>I separated desktop and mobile to allow the mobile version to concentrate on optimised delivery with offline capabilities.</p>

<figure>
  <img src="/blog/img/2014/jan/2014-01-11-case-fpl.jpg" alt="Screenshot of the Flight Plan Guide Database Application v1.0." style="max-width:598px;">
  <figcaption>Screenshot of the Flight Plan Guide Database Application v1.0.</figcaption>
</figure>

<p>Both versions use custom Javascript to filter user selections in the browser, instead of on the server, to save a round trip and make the application respond almost instantly.</p>

<figure>
  <img src="/blog/img/2014/jan/2014-01-10-case-fplm.jpg" alt="Screenshot of the Flight Plan Guide Database Mobile Application v1.0." style="max-width:247px;">
  <figcaption>Screenshot of the Flight Plan Guide Database Mobile Application v1.0.</figcaption>
</figure>

<p>The desktop version allows users to narrow their selection using two groups of checkbox buttons. They could also use a free search input box that would filter the currently visible items and highlight the text that matched the search.</p>

<p>The mobile version used drop down boxes that contained check buttons to reduce screen space used and allow all filter tools and some search results to appear in the available screen space.</p>

<h3>Technical</h3>

<p>The applications use MS SQL and ASP.NET server-side. Their main job is to build JSON data models and deliver them to the client browser embedded in the page.</p>

<p>Custom JavaScript takes care of all filtering and user interaction. This format means that all the requierd data and assets can work on the client once I saved them locally using HTML5 AppCache.</p>

<p>I used jQuery UI for the desktop version and jQuery Mobile for the mobile application.</p>

<p>The Admin site was built using ASP.NET MVC Dynamic Data which automatically created most of the forms needed to properly edit the data. I had to create a few custom pages to tweak the process but overall it was incredible how quickly an admin site could be set up.</p>

<h3>Outcome</h3>

<p>The Flight Plan Guide was initially aimed at a European audience but, after it was recommended by ICAO, it reached a Worldwide audience:</p>

<ul>
<li>+53,000 unique visitors,</li>
<li>+350,000 page views,</li>
<li>from 187 different countries.</li>
</ul>

<p>It was very well received at Eurocontrol and an article appeared about it in the internal Insights magazine.</p>
]]></content>
  </entry>
  
</feed>