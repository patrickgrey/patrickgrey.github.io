<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: geekery | ]]></title>
  <link href="/blog/categories/geekery/atom.xml" rel="self"/>
  <link href="/"/>
  <updated>2015-01-08T14:50:09+00:00</updated>
  <id>/</id>
  <author>
    <name><![CDATA[{"name"=>"Patrick Grey", "email"=>"websemantic@yahoo.co.uk"}]]></name>
    
  </author>
  <generator uri="https://github.com/recurser/jekyll-plugins">Recurser</generator>

  
  <entry>
    <title type="html"><![CDATA[CasperJS, the friendly front-end testing ghost.]]></title>
    <link href="/blog/geekery/javascript/2014/09/02/casperjs-the-friendly-front-end-ghost.html"/>
    <updated>2014-09-02T00:00:00+01:00</updated>
    <id>/blog/geekery/javascript/2014/09/02/casperjs-the-friendly-front-end-ghost</id>
    <content type="html"><![CDATA[<p>A client recently introduced a new requirement that all applications must have documented testing
routines that should be manually completed before they are deployed.</p>

<p>That sounded like a lot of manual effort and I had read about automated front-end testing with
CasperJS. This was my excuse to finally try it out properly.</p>

<p>This blog records how I got CasperJS up and running on my Windows 8.1 machine - not as difficult as
I feared! I&#39;ll also note down my thinking as I learn how to write tests before my &#39;how do I do that&#39;
questions become, &#39;well that&#39;s obvious, I always new that and don&#39;t need to explain it&#39; type learning.</p>

<p>I should say that it took me a while to understand what CapserJS did. Basically, it launches a
&#39;headless browser&#39; against which we can test results (my understanding or headless is like a
browser that takes normal requests processes pages but doesn&#39;t display anything in an actual
browser - it all happens in memory, hence it is run from the command line). My understanding
may well be wrong!</p>

<h3>Installation</h3>

<p>CasperJS depends on PhantomJS and Python.</p>

<p>I downloaded and installed the 2.7.8 version Windows installer from
<a href="https://www.python.org/downloads/">https://www.python.org/downloads/</a>. I would usually try the more
advanced version but my blog runs on Jekyll and the pygments code highlighting will not work with
version 3+.</p>

<p>I found that the installer did not write to my PATH (meaning my consoles would not be able to find it).
So I appended C:\Python27;C:\Python27\Scripts; to my PATH. If you are not sure about this, try
the following link:
<a href="http://www.computerhope.com/issues/ch000549.htm">http://www.computerhope.com/issues/ch000549.htm</a>.</p>

<p>PhantomJS lets you download a zip that contains an exe file
 <a href="http://phantomjs.org/download.html">http://phantomjs.org/download.html</a>. I copied the contents of the
zip to C:\ and then added the following to PATH: C:\phantomjs;</p>

<p>Finally, I installed CasperJS using NPM (this assumes you have installed Node:
<a href="http://nodejs.org/">http://nodejs.org/</a>) by typing the
following into my console to install it globally:
npm install -g casperjs</p>

<p>I then added the location of the batchbin to my PATH:
C:\Users\Patrick\AppData\Roaming\npm\node_modules\casperjs\batchbin;</p>

<h3>Checking Installation</h3>

<p>I added a &#39;tests&#39; directory to the scripts folder of my application (I&#39;ve decided to ship them as
well so the client has the source code for tests). I then created a simple JavaScript file and called it
installCheck.js containing the following code:</p>

<p><div class="highlight"><pre><code class="javascript"><span class="o">&lt;</span><span class="err">/p&gt;</span>

<span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="kd">var</span> <span class="nx">casper</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="o">&amp;</span><span class="err">#</span><span class="mi">39</span><span class="p">;</span><span class="nx">casper</span><span class="o">&amp;</span><span class="err">#</span><span class="mi">39</span><span class="p">;).</span><span class="nx">create</span><span class="p">();</span><span class="o">&lt;</span><span class="err">/p&gt;</span>

<span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">casper</span><span class="p">.</span><span class="nx">start</span><span class="p">(</span><span class="o">&amp;</span><span class="err">#</span><span class="mi">39</span><span class="p">;</span><span class="nx">http</span><span class="o">:</span><span class="c1">//casperjs.org/&amp;#39;, function() {</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">echo</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">getTitle</span><span class="p">());</span>
<span class="p">});</span><span class="o">&lt;</span><span class="err">/p&gt;</span>

<span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">casper</span><span class="p">.</span><span class="nx">thenOpen</span><span class="p">(</span><span class="o">&amp;</span><span class="err">#</span><span class="mi">39</span><span class="p">;</span><span class="nx">http</span><span class="o">:</span><span class="c1">//phantomjs.org&amp;#39;, function() {</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">echo</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">getTitle</span><span class="p">());</span>
<span class="p">});</span><span class="o">&lt;</span><span class="err">/p&gt;</span>

<span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">casper</span><span class="p">.</span><span class="nx">run</span><span class="p">();</span><span class="o">&lt;</span><span class="err">/p&gt;</span>

<span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>
</code></pre></div></p>

<p>Next, I navigate to the &#39;tests&#39; folder in Explorer and right click on it to open Git Bash (my
console of choice). Enter &quot;casperjs installCheck.js&quot; and press enter.</p>

<p>At first I didn&#39;t think it was working as it just returns to a new line, looking like it&#39;s ready to
take another command - however, after a few seconds (as it gets requests back from the sites), the titles
of each page are printed out! It works! Press ctrl+c to escape the routine.</p>

<h3>First Tests</h3>

<p>I&#39;m testing an ASP.NET application. The search page posts back to itself and returns a list of aircraft
based on filters. If a specific aircraft is selected, a new page is loaded with details of that
specific aircarft.</p>

<p>The search page has three basic filters (one drop down and two inputs) and 15 advanced filters.
12 of the advanced filters also have an operator drop down with =, &gt;=, &lt;=, +/-. If the final
value is selected an extra input appears so the user can enter a range.</p>

<p>So, how do I test this lot?</p>

<p>The most obvious was to check that if a basic filter has a valid value to make sure that aircraft
are returned. Filling in the form was pretty simple:</p>

<p><div class="highlight"><pre><code class="javascript"><span class="o">&lt;</span><span class="err">/p&gt;</span>

<span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="kd">var</span> <span class="nx">casper</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="o">&amp;</span><span class="err">#</span><span class="mi">39</span><span class="p">;</span><span class="nx">casper</span><span class="o">&amp;</span><span class="err">#</span><span class="mi">39</span><span class="p">;).</span><span class="nx">create</span><span class="p">();</span><span class="o">&lt;</span><span class="err">/p&gt;</span>

<span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">casper</span><span class="p">.</span><span class="nx">start</span><span class="p">(</span><span class="o">&amp;</span><span class="err">#</span><span class="mi">39</span><span class="p">;</span><span class="nx">http</span><span class="o">:</span><span class="c1">//localhost:56689/default.aspx&amp;#39;, function() {</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">fill</span><span class="p">(</span><span class="o">&amp;</span><span class="err">#</span><span class="mi">39</span><span class="p">;</span><span class="nx">form</span><span class="err">#</span><span class="nx">wsBasicSearchForm</span><span class="o">&amp;</span><span class="err">#</span><span class="mi">39</span><span class="p">;,</span> <span class="p">{</span> <span class="nx">NameFilter</span><span class="o">:</span> <span class="o">&amp;</span><span class="err">#</span><span class="mi">39</span><span class="p">;</span><span class="nx">air</span><span class="o">&amp;</span><span class="err">#</span><span class="mi">39</span><span class="p">;</span> <span class="p">},</span> <span class="kc">true</span><span class="p">);</span>
<span class="p">});</span><span class="o">&lt;</span><span class="err">/p&gt;</span>

<span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>
</code></pre></div></p>

<p>The fill function takes three parameters: the form found via CSS3 query selectors, a field name
with a value to enter and a boolean to submit if true.</p>

<p>Then I would check that an HTML &#39;strong&#39; element that displays the aircraft count had a count
greater than 0.</p>

<p>I then made my first mistake, trying to use native JavaScript to get the inner text of the element:</p>

<p><div class="highlight"><pre><code class="javascript"><span class="o">&lt;</span><span class="err">/p&gt;</span>

<span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="o">&amp;</span><span class="err">#</span><span class="mi">39</span><span class="p">;</span><span class="nx">acftCount</span><span class="o">&amp;</span><span class="err">#</span><span class="mi">39</span><span class="p">;).</span><span class="nx">innerHTML</span><span class="p">;</span><span class="o">&lt;</span><span class="err">/p&gt;</span>

<span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>
</code></pre></div></p>

<p>The element search returned null. The solution was to use a Casper method:</p>

<p><div class="highlight"><pre><code class="javascript"><span class="o">&lt;</span><span class="err">/p&gt;</span>

<span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="k">this</span><span class="p">.</span><span class="nx">echo</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">fetchText</span><span class="p">(</span><span class="o">&amp;</span><span class="err">#</span><span class="mi">39</span><span class="p">;</span><span class="nx">strong</span><span class="err">#</span><span class="nx">acftCount</span><span class="o">&amp;</span><span class="err">#</span><span class="mi">39</span><span class="p">;));</span><span class="o">&lt;</span><span class="err">/p&gt;</span>

<span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>
</code></pre></div></p>

<p>strong is the element type and # is the CSS3 selector for ID.</p>

<p>This works! I still have a long way to go but will post this now and update later.</p>

<p>the plan ahead is:</p>

<ul>
<li>write actuall pass/fail tests instead of printing out results</li>
<li>create a suite of tests that can run across the whole application</li>
<li>check to see how to test the admin section of the site - I will need to log in and do
CRUD operations.</li>
<li>In future do TDD from the start!</li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using CasperJS in a Yeoman Workflow to Test for 404s on a Jekyll Site.]]></title>
    <link href="/blog/geekery/testing/2014/02/12/casperjs-yeoman-jekyll.html"/>
    <updated>2014-02-12T00:00:00+00:00</updated>
    <id>/blog/geekery/testing/2014/02/12/casperjs-yeoman-jekyll</id>
    <content type="html"><![CDATA[<p>I use the <a href="https://github.com/robwierzbowski/generator-jekyllrb" title="The Yeoman Jekyll Generator GitHub page.">Yeoman Jekyll Generator</a> to livereload and build my personal site. I love the automation. I&#39;ve been wanting to introduce testing to my workflow for some time and, for a front-end developer, <a href="http://casperjs.org/">CasperJS</a> looked like a good fit. This post outlines the steps I took to integrate a test for broken links on my site into my Yeoman workflow.</p>

<p>I&#39;d love to hear of any improvements or alternative approaches. All the source files for my personal site are on GitHub at <a href="https://github.com/patrickgrey/patrickgrey.1.1">https://github.com/patrickgrey/patrickgrey.1.1</a> if you want to take a look.</p>

<p>First I installed <a href="http://phantomjs.org/download.html">PhantomJS</a> (I&#39;m on Windows to I downloaded the exe, saved it to C:\bin\phantomjs, then added that to my $PATH). Then I <a href="http://docs.casperjs.org/en/latest/installation.html#installing-from-npm">installed CasperJS</a> using NPM.</p>

<p>Next I created a test folder (&quot;test_casper&quot;) at the root of my project to keep testing separate from site generation. I split my test files into a logical set as suggested at <a href="http://developer.helpscout.net/blog/functional-testing-casperjs/#toc_13">http://developer.helpscout.net/blog/functional-testing-casperjs/#toc_13</a> and created a simple test (like the one <a href="http://docs.casperjs.org/en/latest/testing.html#browser-tests">here</a>) to check it was working. I ran this from the console.</p>

<p>The next challenge was to test the site locally as it was generated. To do this I installed <a href="https://github.com/iamchrismiller/grunt-casper">grunt-casper</a> so that I could run casper as a task from my grunt file.</p>

<p>This is the task configuration:</p>

<p><div class="highlight"><pre><code class="javascript"><span class="o">&lt;</span><span class="err">/p&gt;</span>

<span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">casper</span> <span class="o">:</span> <span class="p">{</span>
    <span class="nx">uiTest</span> <span class="o">:</span> <span class="p">{</span>
        <span class="nx">src</span><span class="o">:</span> <span class="p">[</span><span class="o">&amp;</span><span class="err">#</span><span class="mi">39</span><span class="p">;</span><span class="nx">test_casper</span><span class="o">/</span><span class="nx">test</span><span class="p">.</span><span class="nx">js</span><span class="o">&amp;</span><span class="err">#</span><span class="mi">39</span><span class="p">;],</span>
        <span class="nx">options</span> <span class="o">:</span> <span class="p">{</span>
            <span class="nx">test</span><span class="o">:</span> <span class="kc">true</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span><span class="o">&lt;</span><span class="err">/p&gt;</span>

<span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>
</code></pre></div></p>

<p>and this is the task call I put in the watch configuration:</p>

<p><div class="highlight"><pre><code class="javascript"><span class="o">&lt;</span><span class="err">/p&gt;</span>

<span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">casper</span><span class="o">:</span> <span class="p">{</span>
    <span class="nx">files</span><span class="o">:</span> <span class="p">[</span>
        <span class="o">&amp;</span><span class="err">#</span><span class="mi">39</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="o">%=</span> <span class="nx">yeoman</span><span class="p">.</span><span class="nx">app</span> <span class="o">%&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="sr">/&lt;strong&gt;/</span><span class="o">*</span><span class="p">.{</span><span class="nx">html</span><span class="p">,</span><span class="nx">yml</span><span class="p">,</span><span class="nx">md</span><span class="p">,</span><span class="nx">mkd</span><span class="p">,</span><span class="nx">markdown</span><span class="p">}</span><span class="o">&amp;</span><span class="err">#</span><span class="mi">39</span><span class="p">;,</span>
        <span class="o">&amp;</span><span class="err">#</span><span class="mi">39</span><span class="p">;</span><span class="nx">test_casper</span><span class="o">/&lt;</span><span class="sr">/strong&gt;/</span><span class="o">*</span><span class="p">.</span><span class="nx">js</span><span class="o">&amp;</span><span class="err">#</span><span class="mi">39</span><span class="p">;</span>
    <span class="p">],</span>
    <span class="nx">tasks</span><span class="o">:</span> <span class="p">[</span><span class="o">&amp;</span><span class="err">#</span><span class="mi">39</span><span class="p">;</span><span class="nx">casper</span><span class="o">:</span><span class="nx">uiTest</span><span class="o">&amp;</span><span class="err">#</span><span class="mi">39</span><span class="p">;]</span>
<span class="p">}</span><span class="o">&lt;</span><span class="err">/p&gt;</span>

<span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>
</code></pre></div></p>

<p>Now, when I run &quot;grunt serve&quot; and then make a change to a watched file, the casperJS test is called each time. Running a test on each save is useful when developing my test but once the test is good, I&#39;ll comment it out and the next job is to run the test once the site is built for deployment.</p>

<p>The test itself checks all internal links (i.e. those on http://127.0.0.1:9000/) and has been useful for internal links I put in posts or navigation and have since changed. The test itself was based on the really useful script I found here: <a href="http://planzero.org/blog/2013/03/07/spidering_the_web_with_casperjs">http://planzero.org/blog/2013/03/07/spidering<em>the</em>web<em>with</em>casperjs</a>. You can see the adapted version at <a href="https://github.com/patrickgrey/patrickgrey.1.1/blob/master/test_casper/checkForBrokenLinks.js">https://github.com/patrickgrey/patrickgrey.1.1/blob/master/test_casper/checkForBrokenLinks.js</a>.</p>

<p>Once I get deployment tests up and running, the next step for me is to try and use a Continuous Integration platform like <a href="https://www.codeship.io/">https://www.codeship.io/</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My e-learning development set-up.]]></title>
    <link href="/blog/e-learning/geekery/2014/02/06/e-learning-workflow-yeoman.html"/>
    <updated>2014-02-06T00:00:00+00:00</updated>
    <id>/blog/e-learning/geekery/2014/02/06/e-learning-workflow-yeoman</id>
    <content type="html"><![CDATA[<p>I&#39;m currently developing a lot of Adobe Edge Animate (EA) compositions for e-learning modules. They will ultimately be deployed to a Learning Content Management System (LCMS) but I need a way to quickly review content as I develop it. EA lets you preview in the browser but I like to see content in context so I need to be able to step through different pages and topics within a module. I also like to have live-reload as I code ;-)</p>

<p>This post outlines what I use and the steps I go through to set up a really nice workflow.</p>

<p>I use the <a href="http://yeoman.io">yeoman.io</a> webapp generator to create a simple false module with navigation.</p>

<ul>
<li>Create a project folder and a module folder within that.</li>
<li>Right click on module and open gitbash console at that location.</li>
<li>Update webapp generator using <div class="highlight"><pre><code class="console"><span class="go"> npm install -g generator-webapp </span>
</code></pre></div> (update doesn&#39;t always seem to work for me - must post issue on github).</li>
<li>Scaffold the project using the generator: <div class="highlight"><pre><code class="console"><span class="go"> yo webapp </span>
</code></pre></div></li>
<li>I don&#39;t need Bootstrap but select sass/compass and modernizr.</li>
<li>Once the scaffolding is finished, I run it: <div class="highlight"><pre><code class="console"><span class="go"> grunt serve </span>
</code></pre></div></li>
<li>In the app folder, I add a folder called &quot;topics&quot;. Within this I have topic folders; &quot;t1&quot;, &quot;t2&quot;, etc.</li>
<li>I add my custom index page that includes an iframe linking to pages in the topics folder and navigation buttons.</li>
<li>Navigation is controlled via a simple JSON model in index.html</li>
<li>Now I can add new pages and build the module in context with the benefits of live-reload as I go.</li>
<li>Next I set the project up as a git repository so I have version control: <div class="highlight"><pre><code class="console"><span class="go"> git init </span>
</code></pre></div> on the module folder.</li>
<li>I create a repo on github or (more often with projects for clients) a private repo on bitbucket.</li>
<li>Then add the remote repo to the local one, add the files, commit and push <div class="highlight"><pre><code class="console"><span class="go"> git remote add origin https://patrickgrey@bitbucket.org/patrickgrey/ians2014fam.git</span>
<span class="go">git add -A</span>
<span class="go">git commit -m &amp;quot;Scaffolding files created&amp;quot;</span>
<span class="go">git push -u origin master </span>
</code></pre></div></li>
<li>I customise the Gruntfile.js a little for my own needs e.g. the topics folder needs to be copied to distribution and I comment out HTML compression task as I like to be able to read the output.</li>
<li>Finally, I open the module folder in Sublime Text and save it as a project. I add the project files to the .gitignore file.</li>
</ul>

<p>I&#39;d be happy to send anyone a copy of the navigation files, which you are free to use in any way you like. Just get in touch.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jekyll, Google Analytics and Different Domains]]></title>
    <link href="/blog/geekery/jekyll/2014/01/29/jekyll-google-analytics-different-domain.html"/>
    <updated>2014-01-29T00:00:00+00:00</updated>
    <id>/blog/geekery/jekyll/2014/01/29/jekyll-google-analytics-different-domain</id>
    <content type="html"><![CDATA[<p>The code below switches Google Analytic account based on the current domain. I wanted to do this to avoid having to change the code and recompile each time I wanted to upload to a backup site. This code has not been widely tested yet so do so before putting into a production site.</p>

<p><div class="highlight"><pre><code class="javascript"><span class="o">&lt;</span><span class="err">/p&gt;</span>

<span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span><span class="nx">s</span><span class="p">,</span><span class="nx">o</span><span class="p">,</span><span class="nx">g</span><span class="p">,</span><span class="nx">r</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">m</span><span class="p">){</span>
    <span class="c1">// ...usual GA code block...</span>
<span class="p">})(</span><span class="nb">window</span><span class="p">,</span><span class="nb">document</span><span class="p">,</span><span class="o">&amp;</span><span class="err">#</span><span class="mi">39</span><span class="p">;</span><span class="nx">script</span><span class="o">&amp;</span><span class="err">#</span><span class="mi">39</span><span class="p">;,</span><span class="o">&amp;</span><span class="err">#</span><span class="mi">39</span><span class="p">;</span><span class="c1">//www.google-analytics.com/analytics.js&amp;#39;,&amp;#39;ga&amp;#39;);&lt;/p&gt;</span>

<span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="c1">// My customisation</span>
<span class="k">if</span><span class="p">(</span> <span class="nx">location</span><span class="p">.</span><span class="nx">hostname</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span> <span class="o">&amp;</span><span class="err">#</span><span class="mi">39</span><span class="p">;</span><span class="nx">patrickgrey</span><span class="p">.</span><span class="nx">github</span><span class="p">.</span><span class="nx">io</span><span class="o">&amp;</span><span class="err">#</span><span class="mi">39</span><span class="p">;</span> <span class="p">)</span> <span class="p">)</span> <span class="p">{</span>
  <span class="nx">ga</span><span class="p">(</span><span class="o">&amp;</span><span class="err">#</span><span class="mi">39</span><span class="p">;</span><span class="nx">create</span><span class="o">&amp;</span><span class="err">#</span><span class="mi">39</span><span class="p">;,</span> <span class="o">&amp;</span><span class="err">#</span><span class="mi">39</span><span class="p">;</span><span class="nx">UA</span><span class="o">-</span><span class="mi">41706969</span><span class="o">-</span><span class="mi">2</span><span class="o">&amp;</span><span class="err">#</span><span class="mi">39</span><span class="p">;,</span> <span class="o">&amp;</span><span class="err">#</span><span class="mi">39</span><span class="p">;</span><span class="nx">patrickgrey</span><span class="p">.</span><span class="nx">github</span><span class="p">.</span><span class="nx">io</span><span class="o">/&amp;</span><span class="err">#</span><span class="mi">39</span><span class="p">;);</span>
<span class="p">}</span>
<span class="k">else</span> <span class="p">{</span>
  <span class="nx">ga</span><span class="p">(</span><span class="o">&amp;</span><span class="err">#</span><span class="mi">39</span><span class="p">;</span><span class="nx">create</span><span class="o">&amp;</span><span class="err">#</span><span class="mi">39</span><span class="p">;,</span> <span class="o">&amp;</span><span class="err">#</span><span class="mi">39</span><span class="p">;</span><span class="nx">UA</span><span class="o">-</span><span class="mi">41706969</span><span class="o">-</span><span class="mi">1</span><span class="o">&amp;</span><span class="err">#</span><span class="mi">39</span><span class="p">;,</span> <span class="o">&amp;</span><span class="err">#</span><span class="mi">39</span><span class="p">;</span><span class="nx">patrickgrey</span><span class="p">.</span><span class="nx">co</span><span class="p">.</span><span class="nx">uk</span><span class="o">/&amp;</span><span class="err">#</span><span class="mi">39</span><span class="p">;);</span>
<span class="p">}</span>
<span class="c1">// My customisation END&lt;/p&gt;</span>

<span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">ga</span><span class="p">(</span><span class="o">&amp;</span><span class="err">#</span><span class="mi">39</span><span class="p">;</span><span class="nx">send</span><span class="o">&amp;</span><span class="err">#</span><span class="mi">39</span><span class="p">;,</span> <span class="o">&amp;</span><span class="err">#</span><span class="mi">39</span><span class="p">;</span><span class="nx">pageview</span><span class="o">&amp;</span><span class="err">#</span><span class="mi">39</span><span class="p">;);</span><span class="o">&lt;</span><span class="err">/p&gt;</span>

<span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>
</code></pre></div></p>

<p>I have a Jekyll generated site. I build and upload it to my hosting (patrickgrey.co.uk). I also keep a backup on GitHub. Since it&#39;s there I thought, why not make it a GitHub Pages site as well? So I did (patrickgrey.github.io). This lets me test run updates on github before launching on the live website.</p>

<p>The problem was I wanted to use Google Analytics for each one to see who was poking their nose in ;-) The manual approach would have been to comment out one account UA id and uncomment the other, recompile the Jekyll site and upload/push. The code above means I can use the same code base for both sites. An edge case but it may come in handy.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Understanding Node, NPM and Bower]]></title>
    <link href="/blog/geekery/2013/06/13/understanding-node-npm.html"/>
    <updated>2013-06-13T00:00:00+01:00</updated>
    <id>/blog/geekery/2013/06/13/understanding-node-npm</id>
    <content type="html"><![CDATA[<p>I started to become aware of command line tools when I started using <a href="http://Yeoman.io" target="_blank">Yeoman.io</a>. These tools are useful and are becoming more popular in the front-end development area. I decided I needed to understand what the different tools were in order to use them properly.</p>

<h3>Node.js</h3>

<p>This has been at the root of the tools I have used. This article gave me a good insight into what it is and what it aims to do:
<a href="https://github.com/maxogden/art-of-node" target="_blank">https://github.com/maxogden/art-of-node</a></p>

<p><em>Takeaway:</em> Node is just a tool for managing I/O across file systems and networks. Think of as a server-side platform written in Javascript.</p>

<p>Node can be used to write programs that;</p>

<ul>
<li>use the protocols of the web (I’m guessing at this point this could be related to SOA - fast and simple - but Ruby seems more popular for that just now)</li>
<li>read and write data to the filesystem and local processes/memory</li>
</ul>

<p>It does this in an asynchronous way and uses an event model.</p>

<h3>NPM</h3>

<p>I found this really useful for my understanding of NPM and Bower:
<a href="http://tech.pro/tutorial/1190/package-managers-an-introductory-guide-for-the-uninitiated-front-end-developer">http://tech.pro/tutorial/1190/package-managers-an-introductory-guide-for-the-uninitiated-front-end-developer</a></p>

<p><em>Takeaway:</em> NPM allows me to install, update and uninstall tools that help my workflow. These tools run in the console.</p>

<h3>Bower</h3>

<p>Bower does the same, loading all sorts of components for the front end. The article didn’t give me much of an idea of the practical potential, I need to look about more for that. Note: I can see real benefits for this like loading icon sprites (social media) or html components but I have a concern about js and css files as it seems that I have to link to each one that is installed. For performance reasons, I prefer to minify and concatenate these files for performance. Maybe I’m wrong here but this was my initial impression.</p>
]]></content>
  </entry>
  
</feed>